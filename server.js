require('dotenv').config();
const express = require('express');
const axios = require('axios');
const app = express();

// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ 3000 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
const port = process.env.PORT || 3000;

app.use(express.json());

// –û–±—Ä–∞–±–æ—Ç–∫–∞ GET-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
app.get('/', (req, res) => {
  res.send('API —Ä–∞–±–æ—Ç–∞–µ—Ç!');
});

const HF_API_KEY = process.env.HF_API_KEY;

app.post('/webhook', async (req, res) => {
  const userMessage = req.body.queryResult.queryText;

  const prompt = `–¢—ã –ê–ª—å—Ç—É—à–∫–∞: –º–∏–ª–∞—è, —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω–∞—è, –º–µ–º–Ω–∞—è –ø–æ–¥—Ä—É–≥–∞, –∫–æ—Ç–æ—Ä–∞—è –≤—Å–µ–≥–¥–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–æ—Å–∏–ª: "${userMessage}"`;

  try {
    const response = await axios.post(
      'https://api-inference.huggingface.co/models/gpt2',
      { inputs: prompt },
      {
        headers: {
          'Authorization': `Bearer ${HF_API_KEY}`,
          'Content-Type': 'application/json'
        }
      }
    );

    const generatedText = response.data.generated_text || "–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –∫–æ—Ç–∏–∫ üñ§";
    res.json({ fulfillmentText: generatedText.trim() });
  } catch (error) {
    console.error('Error during API call:', error);
    res.json({ fulfillmentText: "–£–ø—Å, –∑–∞–π, –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ üòø" });
  }
});

app.listen(port, () => {
  console.log(`–ê–ª—å—Ç—É—à–∫–∞ –æ–Ω–ª–∞–π–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}!`);
});
